{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.NODE_ENV === 'production' ? '/api/vandv-ipl' : 'https://soapbeta.streamflow.ca/iplvandv';\nconst credentials = {\n  username: 'M1945',\n  password: '9dVxdym69mNs3G8'\n};\n\n// Cache for parts data\nconst partsCache = new Map();\nconst CACHE_DURATION = 30 * 60 * 1000; // 30 minutes\n\n// Known model mappings (we'll expand this over time)\nconst modelMappings = {\n  'MAV6000AWQ': '87048',\n  'MAV6000AWW': '87048',\n  'MED6000AWQ': '87048',\n  'MGD6000AWQ': '87048',\n  'WTW6000AWQ': '87048',\n  'WFW6000AWQ': '87048',\n  'WRF6000AWQ': '87048',\n  'WRS6000AWQ': '87048'\n};\n\n// Get all parts for a model by fetching all diagrams\nasync function getAllPartsForModel(modelNumber, modelId) {\n  const cacheKey = `${modelNumber}-${modelId}`;\n  const cached = partsCache.get(cacheKey);\n  if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {\n    return cached.parts;\n  }\n  try {\n    // Get all diagrams\n    const diagramsResponse = await axios.post(`${API_BASE_URL}/get-diagrams`, {\n      ...credentials,\n      modelNumber,\n      modelId\n    });\n    if (!diagramsResponse.data || !Array.isArray(diagramsResponse.data)) {\n      return [];\n    }\n\n    // Fetch parts for each diagram\n    const allParts = [];\n    const partsMap = new Map(); // To avoid duplicates\n\n    for (const diagram of diagramsResponse.data) {\n      try {\n        const partsResponse = await axios.post(`${API_BASE_URL}/get-diagram-parts`, {\n          ...credentials,\n          modelNumber,\n          modelId,\n          diagramId: diagram.diagramId\n        });\n        if (partsResponse.data && typeof partsResponse.data === 'object') {\n          // Convert object to array and add diagram info\n          const parts = Object.values(partsResponse.data);\n          parts.forEach(part => {\n            // Use part number as key to avoid duplicates\n            if (!partsMap.has(part.partNumber)) {\n              partsMap.set(part.partNumber, {\n                ...part,\n                diagramName: diagram.sectionName,\n                diagramId: diagram.diagramId,\n                modelNumber,\n                modelId\n              });\n            }\n          });\n        }\n      } catch (error) {\n        console.error(`Error fetching parts for diagram ${diagram.diagramId}:`, error);\n      }\n    }\n    const uniqueParts = Array.from(partsMap.values());\n\n    // Cache the results\n    partsCache.set(cacheKey, {\n      parts: uniqueParts,\n      timestamp: Date.now()\n    });\n    return uniqueParts;\n  } catch (error) {\n    console.error('Error fetching parts:', error);\n    return [];\n  }\n}\n\n// Search parts across all cached models\nexport async function searchParts(searchTerm) {\n  if (!searchTerm || searchTerm.trim().length < 2) {\n    return [];\n  }\n  const searchLower = searchTerm.toLowerCase();\n  const results = [];\n\n  // First, try to load parts for known models to build cache\n  for (const [modelNumber, modelId] of Object.entries(modelMappings)) {\n    await getAllPartsForModel(modelNumber, modelId);\n  }\n\n  // Search through all cached parts\n  for (const cached of partsCache.values()) {\n    if (cached.parts) {\n      const matchingParts = cached.parts.filter(part => {\n        return part.partNumber.toLowerCase().includes(searchLower) || part.partDescription.toLowerCase().includes(searchLower);\n      });\n      results.push(...matchingParts);\n    }\n  }\n\n  // Remove duplicates and sort by relevance\n  const uniqueResults = Array.from(new Map(results.map(part => [part.partNumber, part])).values());\n\n  // Sort by relevance (exact matches first)\n  uniqueResults.sort((a, b) => {\n    const aExact = a.partNumber.toLowerCase() === searchLower;\n    const bExact = b.partNumber.toLowerCase() === searchLower;\n    if (aExact && !bExact) return -1;\n    if (!aExact && bExact) return 1;\n    return 0;\n  });\n  return uniqueResults.slice(0, 50); // Limit results\n}\n\n// Get parts for a specific model\nexport async function getPartsForModel(modelNumber) {\n  const modelId = modelMappings[modelNumber];\n  if (!modelId) {\n    throw new Error(`Model ID not found for ${modelNumber}. This model may not be supported yet.`);\n  }\n  return getAllPartsForModel(modelNumber, modelId);\n}\n\n// Add a new model mapping\nexport function addModelMapping(modelNumber, modelId) {\n  modelMappings[modelNumber] = modelId;\n}\n\n// Get available models\nexport function getAvailableModels() {\n  return Object.keys(modelMappings);\n}\n\n// Clear cache\nexport function clearCache() {\n  partsCache.clear();\n}","map":{"version":3,"names":["axios","API_BASE_URL","process","env","NODE_ENV","credentials","username","password","partsCache","Map","CACHE_DURATION","modelMappings","getAllPartsForModel","modelNumber","modelId","cacheKey","cached","get","Date","now","timestamp","parts","diagramsResponse","post","data","Array","isArray","allParts","partsMap","diagram","partsResponse","diagramId","Object","values","forEach","part","has","partNumber","set","diagramName","sectionName","error","console","uniqueParts","from","searchParts","searchTerm","trim","length","searchLower","toLowerCase","results","entries","matchingParts","filter","includes","partDescription","push","uniqueResults","map","sort","a","b","aExact","bExact","slice","getPartsForModel","Error","addModelMapping","getAvailableModels","keys","clearCache","clear"],"sources":["/Users/anuragmishra/Documents/Development/ML_Resources/RA/src/services/vandvPartsApi.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.NODE_ENV === 'production'\n    ? '/api/vandv-ipl'\n    : 'https://soapbeta.streamflow.ca/iplvandv';\n\nconst credentials = {\n    username: 'M1945',\n    password: '9dVxdym69mNs3G8'\n};\n\n// Cache for parts data\nconst partsCache = new Map();\nconst CACHE_DURATION = 30 * 60 * 1000; // 30 minutes\n\n// Known model mappings (we'll expand this over time)\nconst modelMappings = {\n    'MAV6000AWQ': '87048',\n    'MAV6000AWW': '87048',\n    'MED6000AWQ': '87048',\n    'MGD6000AWQ': '87048',\n    'WTW6000AWQ': '87048',\n    'WFW6000AWQ': '87048',\n    'WRF6000AWQ': '87048',\n    'WRS6000AWQ': '87048'\n};\n\n// Get all parts for a model by fetching all diagrams\nasync function getAllPartsForModel(modelNumber, modelId) {\n    const cacheKey = `${modelNumber}-${modelId}`;\n    const cached = partsCache.get(cacheKey);\n\n    if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {\n        return cached.parts;\n    }\n\n    try {\n        // Get all diagrams\n        const diagramsResponse = await axios.post(`${API_BASE_URL}/get-diagrams`, {\n            ...credentials,\n            modelNumber,\n            modelId\n        });\n\n        if (!diagramsResponse.data || !Array.isArray(diagramsResponse.data)) {\n            return [];\n        }\n\n        // Fetch parts for each diagram\n        const allParts = [];\n        const partsMap = new Map(); // To avoid duplicates\n\n        for (const diagram of diagramsResponse.data) {\n            try {\n                const partsResponse = await axios.post(`${API_BASE_URL}/get-diagram-parts`, {\n                    ...credentials,\n                    modelNumber,\n                    modelId,\n                    diagramId: diagram.diagramId\n                });\n\n                if (partsResponse.data && typeof partsResponse.data === 'object') {\n                    // Convert object to array and add diagram info\n                    const parts = Object.values(partsResponse.data);\n                    parts.forEach(part => {\n                        // Use part number as key to avoid duplicates\n                        if (!partsMap.has(part.partNumber)) {\n                            partsMap.set(part.partNumber, {\n                                ...part,\n                                diagramName: diagram.sectionName,\n                                diagramId: diagram.diagramId,\n                                modelNumber,\n                                modelId\n                            });\n                        }\n                    });\n                }\n            } catch (error) {\n                console.error(`Error fetching parts for diagram ${diagram.diagramId}:`, error);\n            }\n        }\n\n        const uniqueParts = Array.from(partsMap.values());\n\n        // Cache the results\n        partsCache.set(cacheKey, {\n            parts: uniqueParts,\n            timestamp: Date.now()\n        });\n\n        return uniqueParts;\n    } catch (error) {\n        console.error('Error fetching parts:', error);\n        return [];\n    }\n}\n\n// Search parts across all cached models\nexport async function searchParts(searchTerm) {\n    if (!searchTerm || searchTerm.trim().length < 2) {\n        return [];\n    }\n\n    const searchLower = searchTerm.toLowerCase();\n    const results = [];\n\n    // First, try to load parts for known models to build cache\n    for (const [modelNumber, modelId] of Object.entries(modelMappings)) {\n        await getAllPartsForModel(modelNumber, modelId);\n    }\n\n    // Search through all cached parts\n    for (const cached of partsCache.values()) {\n        if (cached.parts) {\n            const matchingParts = cached.parts.filter(part => {\n                return part.partNumber.toLowerCase().includes(searchLower) ||\n                    part.partDescription.toLowerCase().includes(searchLower);\n            });\n            results.push(...matchingParts);\n        }\n    }\n\n    // Remove duplicates and sort by relevance\n    const uniqueResults = Array.from(\n        new Map(results.map(part => [part.partNumber, part])).values()\n    );\n\n    // Sort by relevance (exact matches first)\n    uniqueResults.sort((a, b) => {\n        const aExact = a.partNumber.toLowerCase() === searchLower;\n        const bExact = b.partNumber.toLowerCase() === searchLower;\n        if (aExact && !bExact) return -1;\n        if (!aExact && bExact) return 1;\n        return 0;\n    });\n\n    return uniqueResults.slice(0, 50); // Limit results\n}\n\n// Get parts for a specific model\nexport async function getPartsForModel(modelNumber) {\n    const modelId = modelMappings[modelNumber];\n    if (!modelId) {\n        throw new Error(`Model ID not found for ${modelNumber}. This model may not be supported yet.`);\n    }\n\n    return getAllPartsForModel(modelNumber, modelId);\n}\n\n// Add a new model mapping\nexport function addModelMapping(modelNumber, modelId) {\n    modelMappings[modelNumber] = modelId;\n}\n\n// Get available models\nexport function getAvailableModels() {\n    return Object.keys(modelMappings);\n}\n\n// Clear cache\nexport function clearCache() {\n    partsCache.clear();\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}