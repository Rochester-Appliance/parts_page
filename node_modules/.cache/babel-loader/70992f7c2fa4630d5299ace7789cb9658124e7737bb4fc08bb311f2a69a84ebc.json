{"ast":null,"code":"// Parts Cache Service\n// Stores parts data from V&V IPL API for searching\n\nclass PartsCache {\n  constructor() {\n    this.cache = new Map();\n    this.modelIdMap = new Map();\n    this.lastUpdated = null;\n    this.loadFromLocalStorage();\n  }\n\n  // Load cache from localStorage\n  loadFromLocalStorage() {\n    try {\n      const savedCache = localStorage.getItem('partsCache');\n      const savedModelMap = localStorage.getItem('modelIdMap');\n      if (savedCache) {\n        const data = JSON.parse(savedCache);\n        this.cache = new Map(data.cache);\n        this.lastUpdated = data.lastUpdated;\n      }\n      if (savedModelMap) {\n        this.modelIdMap = new Map(JSON.parse(savedModelMap));\n      }\n    } catch (error) {\n      console.error('Error loading parts cache:', error);\n    }\n  }\n\n  // Save cache to localStorage\n  saveToLocalStorage() {\n    try {\n      const cacheData = {\n        cache: Array.from(this.cache.entries()),\n        lastUpdated: this.lastUpdated\n      };\n      localStorage.setItem('partsCache', JSON.stringify(cacheData));\n      localStorage.setItem('modelIdMap', JSON.stringify(Array.from(this.modelIdMap.entries())));\n    } catch (error) {\n      console.error('Error saving parts cache:', error);\n    }\n  }\n\n  // Add model ID mapping\n  addModelIdMapping(modelNumber, modelId) {\n    this.modelIdMap.set(modelNumber.toUpperCase(), modelId);\n    this.saveToLocalStorage();\n  }\n\n  // Get model ID from model number\n  getModelId(modelNumber) {\n    return this.modelIdMap.get(modelNumber.toUpperCase());\n  }\n\n  // Add parts for a model\n  addPartsForModel(modelNumber, modelId, parts) {\n    const key = `${modelNumber}_${modelId}`;\n\n    // Store parts indexed by part number\n    const existingParts = this.cache.get(key) || {};\n    const updatedParts = {\n      ...existingParts,\n      ...parts\n    };\n    this.cache.set(key, updatedParts);\n\n    // Also store model ID mapping\n    this.addModelIdMapping(modelNumber, modelId);\n\n    // Update timestamp\n    this.lastUpdated = new Date().toISOString();\n    this.saveToLocalStorage();\n    console.log(`✅ Cached ${Object.keys(parts).length} parts for ${modelNumber}`);\n  }\n\n  // Get all parts for a model\n  getPartsForModel(modelNumber, modelId) {\n    const key = `${modelNumber}_${modelId}`;\n    return this.cache.get(key) || {};\n  }\n\n  // Search parts across all cached models\n  searchParts(searchTerm, manufacturer = null) {\n    const results = [];\n    const searchLower = searchTerm.toLowerCase();\n\n    // Search through all cached models\n    for (const [modelKey, parts] of this.cache.entries()) {\n      const [modelNumber] = modelKey.split('_');\n\n      // Filter by manufacturer if specified\n      if (manufacturer && !modelNumber.startsWith(manufacturer)) {\n        continue;\n      }\n\n      // Search through parts\n      for (const [partNumber, partData] of Object.entries(parts)) {\n        if (partNumber.toLowerCase().includes(searchLower) || partData.partDescription && partData.partDescription.toLowerCase().includes(searchLower)) {\n          results.push({\n            ...partData,\n            modelNumber,\n            matchedOn: partNumber.toLowerCase().includes(searchLower) ? 'partNumber' : 'description'\n          });\n        }\n      }\n    }\n\n    // Sort by relevance (part number matches first)\n    results.sort((a, b) => {\n      if (a.matchedOn === 'partNumber' && b.matchedOn !== 'partNumber') return -1;\n      if (a.matchedOn !== 'partNumber' && b.matchedOn === 'partNumber') return 1;\n      return 0;\n    });\n    return results;\n  }\n\n  // Get cache statistics\n  getStats() {\n    let totalParts = 0;\n    let totalModels = this.cache.size;\n    for (const parts of this.cache.values()) {\n      totalParts += Object.keys(parts).length;\n    }\n    return {\n      totalModels,\n      totalParts,\n      lastUpdated: this.lastUpdated,\n      modelIdMappings: this.modelIdMap.size\n    };\n  }\n\n  // Clear cache\n  clear() {\n    this.cache.clear();\n    this.lastUpdated = null;\n    localStorage.removeItem('partsCache');\n    console.log('Parts cache cleared');\n  }\n\n  // Get all cached model numbers\n  getCachedModels() {\n    const models = [];\n    for (const key of this.cache.keys()) {\n      const [modelNumber, modelId] = key.split('_');\n      models.push({\n        modelNumber,\n        modelId\n      });\n    }\n    return models;\n  }\n}\n\n// Create singleton instance\nconst partsCache = new PartsCache();\nexport default partsCache;","map":{"version":3,"names":["PartsCache","constructor","cache","Map","modelIdMap","lastUpdated","loadFromLocalStorage","savedCache","localStorage","getItem","savedModelMap","data","JSON","parse","error","console","saveToLocalStorage","cacheData","Array","from","entries","setItem","stringify","addModelIdMapping","modelNumber","modelId","set","toUpperCase","getModelId","get","addPartsForModel","parts","key","existingParts","updatedParts","Date","toISOString","log","Object","keys","length","getPartsForModel","searchParts","searchTerm","manufacturer","results","searchLower","toLowerCase","modelKey","split","startsWith","partNumber","partData","includes","partDescription","push","matchedOn","sort","a","b","getStats","totalParts","totalModels","size","values","modelIdMappings","clear","removeItem","getCachedModels","models","partsCache"],"sources":["/Users/anuragmishra/Documents/Development/ML_Resources/RA/src/services/partsCache.js"],"sourcesContent":["// Parts Cache Service\n// Stores parts data from V&V IPL API for searching\n\nclass PartsCache {\n    constructor() {\n        this.cache = new Map();\n        this.modelIdMap = new Map();\n        this.lastUpdated = null;\n        this.loadFromLocalStorage();\n    }\n\n    // Load cache from localStorage\n    loadFromLocalStorage() {\n        try {\n            const savedCache = localStorage.getItem('partsCache');\n            const savedModelMap = localStorage.getItem('modelIdMap');\n\n            if (savedCache) {\n                const data = JSON.parse(savedCache);\n                this.cache = new Map(data.cache);\n                this.lastUpdated = data.lastUpdated;\n            }\n\n            if (savedModelMap) {\n                this.modelIdMap = new Map(JSON.parse(savedModelMap));\n            }\n        } catch (error) {\n            console.error('Error loading parts cache:', error);\n        }\n    }\n\n    // Save cache to localStorage\n    saveToLocalStorage() {\n        try {\n            const cacheData = {\n                cache: Array.from(this.cache.entries()),\n                lastUpdated: this.lastUpdated\n            };\n            localStorage.setItem('partsCache', JSON.stringify(cacheData));\n            localStorage.setItem('modelIdMap', JSON.stringify(Array.from(this.modelIdMap.entries())));\n        } catch (error) {\n            console.error('Error saving parts cache:', error);\n        }\n    }\n\n    // Add model ID mapping\n    addModelIdMapping(modelNumber, modelId) {\n        this.modelIdMap.set(modelNumber.toUpperCase(), modelId);\n        this.saveToLocalStorage();\n    }\n\n    // Get model ID from model number\n    getModelId(modelNumber) {\n        return this.modelIdMap.get(modelNumber.toUpperCase());\n    }\n\n    // Add parts for a model\n    addPartsForModel(modelNumber, modelId, parts) {\n        const key = `${modelNumber}_${modelId}`;\n\n        // Store parts indexed by part number\n        const existingParts = this.cache.get(key) || {};\n        const updatedParts = { ...existingParts, ...parts };\n\n        this.cache.set(key, updatedParts);\n\n        // Also store model ID mapping\n        this.addModelIdMapping(modelNumber, modelId);\n\n        // Update timestamp\n        this.lastUpdated = new Date().toISOString();\n        this.saveToLocalStorage();\n\n        console.log(`✅ Cached ${Object.keys(parts).length} parts for ${modelNumber}`);\n    }\n\n    // Get all parts for a model\n    getPartsForModel(modelNumber, modelId) {\n        const key = `${modelNumber}_${modelId}`;\n        return this.cache.get(key) || {};\n    }\n\n    // Search parts across all cached models\n    searchParts(searchTerm, manufacturer = null) {\n        const results = [];\n        const searchLower = searchTerm.toLowerCase();\n\n        // Search through all cached models\n        for (const [modelKey, parts] of this.cache.entries()) {\n            const [modelNumber] = modelKey.split('_');\n\n            // Filter by manufacturer if specified\n            if (manufacturer && !modelNumber.startsWith(manufacturer)) {\n                continue;\n            }\n\n            // Search through parts\n            for (const [partNumber, partData] of Object.entries(parts)) {\n                if (\n                    partNumber.toLowerCase().includes(searchLower) ||\n                    (partData.partDescription && partData.partDescription.toLowerCase().includes(searchLower))\n                ) {\n                    results.push({\n                        ...partData,\n                        modelNumber,\n                        matchedOn: partNumber.toLowerCase().includes(searchLower) ? 'partNumber' : 'description'\n                    });\n                }\n            }\n        }\n\n        // Sort by relevance (part number matches first)\n        results.sort((a, b) => {\n            if (a.matchedOn === 'partNumber' && b.matchedOn !== 'partNumber') return -1;\n            if (a.matchedOn !== 'partNumber' && b.matchedOn === 'partNumber') return 1;\n            return 0;\n        });\n\n        return results;\n    }\n\n    // Get cache statistics\n    getStats() {\n        let totalParts = 0;\n        let totalModels = this.cache.size;\n\n        for (const parts of this.cache.values()) {\n            totalParts += Object.keys(parts).length;\n        }\n\n        return {\n            totalModels,\n            totalParts,\n            lastUpdated: this.lastUpdated,\n            modelIdMappings: this.modelIdMap.size\n        };\n    }\n\n    // Clear cache\n    clear() {\n        this.cache.clear();\n        this.lastUpdated = null;\n        localStorage.removeItem('partsCache');\n        console.log('Parts cache cleared');\n    }\n\n    // Get all cached model numbers\n    getCachedModels() {\n        const models = [];\n        for (const key of this.cache.keys()) {\n            const [modelNumber, modelId] = key.split('_');\n            models.push({ modelNumber, modelId });\n        }\n        return models;\n    }\n}\n\n// Create singleton instance\nconst partsCache = new PartsCache();\n\nexport default partsCache; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}