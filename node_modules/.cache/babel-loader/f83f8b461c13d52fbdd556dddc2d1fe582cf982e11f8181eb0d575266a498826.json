{"ast":null,"code":"import axios from 'axios';\n\n// DMI API Configuration\nconst DMI_CONFIG = {\n  DEALER_ID: process.env.REACT_APP_DMI_DEALER_ID || '118215',\n  REST_CODE: process.env.REACT_APP_DMI_REST_CODE || 'DL67AJ19M2R0J',\n  BASE_URL: process.env.REACT_APP_DMI_PRODUCTION_URL || 'https://dmidrs.com/dealers/dmirest',\n  SANDBOX_URL: process.env.REACT_APP_DMI_SANDBOX_URL || 'https://dmidrs.com/dealers_sb/dmirest',\n  USE_SANDBOX: process.env.REACT_APP_DMI_ENVIRONMENT === 'sandbox',\n  USE_MOCK: false,\n  // Set to true to use mock data\n  // Rochester Appliance proxy endpoint\n  PROXY_URL: 'https://rochesterapplianceparts.com/api/dmi-proxy'\n};\n\n// Enhanced cache system\nlet inventoryCache = null;\nlet cacheTimestamp = null;\nconst CACHE_DURATION = 30 * 60 * 1000; // 30 minutes (increased from 5)\n\n// Search cache to store recent search results\nconst searchCache = new Map();\nconst SEARCH_CACHE_DURATION = 10 * 60 * 1000; // 10 minutes\nconst MAX_SEARCH_CACHE_SIZE = 100;\n\n// Loading state\nlet isLoadingInventory = false;\nlet loadingPromise = null;\n\n// Pre-indexed search data for faster lookups\nlet searchIndex = null;\nlet indexTimestamp = null;\n\n// Create axios instance with default config\nconst apiClient = axios.create({\n  timeout: 60000,\n  // Increased to 60 seconds for proxy requests\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor for debugging\napiClient.interceptors.request.use(request => {\n  console.log('DMI API Request:', request);\n  return request;\n}, error => {\n  console.error('DMI API Request Error:', error);\n  return Promise.reject(error);\n});\n\n// Response interceptor for debugging\napiClient.interceptors.response.use(response => {\n  console.log('DMI API Response:', response);\n  console.log('Response status:', response.status);\n  console.log('Response data preview:', response.data ? JSON.stringify(response.data).substring(0, 200) : 'No data');\n  return response;\n}, error => {\n  console.error('DMI API Response Error:', error);\n  if (error.response) {\n    console.error('Error status:', error.response.status);\n    console.error('Error data:', error.response.data);\n  }\n  return Promise.reject(error);\n});\n\n// Helper function to build URL with credentials\nconst buildUrl = (resource, additionalParams = {}) => {\n  const baseUrl = DMI_CONFIG.USE_SANDBOX ? DMI_CONFIG.SANDBOX_URL : DMI_CONFIG.BASE_URL;\n  const params = new URLSearchParams({\n    format: 'json',\n    resource: resource,\n    dealerid: DMI_CONFIG.DEALER_ID,\n    restcode: DMI_CONFIG.REST_CODE,\n    ...additionalParams\n  });\n  const apiUrl = `${baseUrl}/dmirest.php?${params.toString()}`;\n\n  // In development, use a public CORS proxy to bypass CORS issues\n  if (process.env.NODE_ENV === 'development') {\n    // Try allorigins.win which preserves the original request better\n    return `https://api.allorigins.win/raw?url=${encodeURIComponent(apiUrl)}`;\n  }\n  return apiUrl;\n};\n\n// Helper function to build POST URL\nconst buildPostUrl = resource => {\n  const baseUrl = DMI_CONFIG.USE_SANDBOX ? DMI_CONFIG.SANDBOX_URL : DMI_CONFIG.BASE_URL;\n  const params = new URLSearchParams({\n    format: 'json',\n    resource: resource,\n    dealerid: DMI_CONFIG.DEALER_ID,\n    restcode: DMI_CONFIG.REST_CODE\n  });\n  const apiUrl = `${baseUrl}/dmirest/dmirest_api.php?${params.toString()}`;\n\n  // In development, use a public CORS proxy to bypass CORS issues\n  if (process.env.NODE_ENV === 'development') {\n    // Try allorigins.win which preserves the original request better\n    return `https://api.allorigins.win/raw?url=${encodeURIComponent(apiUrl)}`;\n  }\n  return apiUrl;\n};\n\n// Helper function to create search index\nconst createSearchIndex = inventory => {\n  const index = {\n    byModel: new Map(),\n    byBrand: new Map(),\n    byDescription: new Map(),\n    byCategory: new Map(),\n    allItems: inventory\n  };\n  inventory.forEach(item => {\n    // Index by model number\n    if (item.Model_Number) {\n      const modelLower = item.Model_Number.toLowerCase();\n      // Store by full model and by parts\n      index.byModel.set(modelLower, item);\n\n      // Also index by model parts for partial matches\n      const modelParts = modelLower.split(/[\\s-_]+/);\n      modelParts.forEach(part => {\n        if (part.length > 2) {\n          if (!index.byModel.has(part)) {\n            index.byModel.set(part, []);\n          }\n          const items = index.byModel.get(part);\n          if (Array.isArray(items)) {\n            items.push(item);\n          }\n        }\n      });\n    }\n\n    // Index by brand\n    if (item.Brand) {\n      const brandLower = item.Brand.toLowerCase();\n      if (!index.byBrand.has(brandLower)) {\n        index.byBrand.set(brandLower, []);\n      }\n      index.byBrand.get(brandLower).push(item);\n    }\n\n    // Index by description words\n    if (item.Description) {\n      const words = item.Description.toLowerCase().split(/\\s+/);\n      words.forEach(word => {\n        if (word.length > 3) {\n          if (!index.byDescription.has(word)) {\n            index.byDescription.set(word, []);\n          }\n          index.byDescription.get(word).push(item);\n        }\n      });\n    }\n\n    // Index by category\n    if (item.Category_Major) {\n      const categoryLower = item.Category_Major.toLowerCase();\n      if (!index.byCategory.has(categoryLower)) {\n        index.byCategory.set(categoryLower, []);\n      }\n      index.byCategory.get(categoryLower).push(item);\n    }\n  });\n  return index;\n};\n\n// Helper function to search using index\nconst searchWithIndex = (searchTerm, index) => {\n  const searchLower = searchTerm.toLowerCase();\n  const resultSet = new Set();\n\n  // Exact model match has highest priority\n  if (index.byModel.has(searchLower)) {\n    const item = index.byModel.get(searchLower);\n    if (!Array.isArray(item)) {\n      resultSet.add(item);\n    }\n  }\n\n  // Search in model parts\n  const searchParts = searchLower.split(/[\\s-_]+/);\n  searchParts.forEach(part => {\n    if (part.length > 2 && index.byModel.has(part)) {\n      const items = index.byModel.get(part);\n      if (Array.isArray(items)) {\n        items.forEach(item => resultSet.add(item));\n      }\n    }\n  });\n\n  // Search in brands\n  if (index.byBrand.has(searchLower)) {\n    index.byBrand.get(searchLower).forEach(item => resultSet.add(item));\n  }\n\n  // Search in description words\n  const words = searchLower.split(/\\s+/);\n  words.forEach(word => {\n    if (word.length > 3 && index.byDescription.has(word)) {\n      index.byDescription.get(word).forEach(item => resultSet.add(item));\n    }\n  });\n\n  // Search in categories\n  if (index.byCategory.has(searchLower)) {\n    index.byCategory.get(searchLower).forEach(item => resultSet.add(item));\n  }\n\n  // Also do a fallback substring search on items not yet found\n  if (resultSet.size < 50) {\n    index.allItems.forEach(item => {\n      if (!resultSet.has(item)) {\n        const modelMatch = item.Model_Number && item.Model_Number.toLowerCase().includes(searchLower);\n        const descMatch = item.Description && item.Description.toLowerCase().includes(searchLower);\n        const brandMatch = item.Brand && item.Brand.toLowerCase().includes(searchLower);\n        if (modelMatch || descMatch || brandMatch) {\n          resultSet.add(item);\n        }\n      }\n    });\n  }\n  return Array.from(resultSet);\n};\n\n// DMI API Service\nconst dmiApi = {\n  // Preload inventory (call this on app start)\n  async preloadInventory() {\n    if (inventoryCache && cacheTimestamp && Date.now() - cacheTimestamp < CACHE_DURATION) {\n      console.log('üì¶ Inventory already cached');\n      return;\n    }\n    console.log('üîÑ Preloading inventory in background...');\n    // Don't await, let it load in background\n    this.getInventory().catch(err => {\n      console.error('Failed to preload inventory:', err);\n    });\n  },\n  // Get full inventory with improved caching\n  async getInventory(params = {}) {\n    if (DMI_CONFIG.USE_MOCK) {\n      console.log('üîÑ Mock mode is enabled but no mock data available');\n      return [];\n    }\n\n    // Check cache first\n    if (inventoryCache && cacheTimestamp && Date.now() - cacheTimestamp < CACHE_DURATION) {\n      console.log('üì¶ Using cached inventory data');\n      return inventoryCache;\n    }\n\n    // If already loading, return the existing promise\n    if (isLoadingInventory && loadingPromise) {\n      console.log('‚è≥ Inventory is already being loaded, waiting...');\n      return loadingPromise;\n    }\n    isLoadingInventory = true;\n    loadingPromise = (async () => {\n      try {\n        const url = buildUrl('inventory', params);\n        console.log('üåê Fetching real inventory from DMI API...');\n        console.log('API URL:', url);\n\n        // Also log the decoded URL for debugging\n        if (url.includes('corsproxy.io')) {\n          const decodedUrl = decodeURIComponent(url.split('corsproxy.io/?')[1]);\n          console.log('Actual DMI URL:', decodedUrl);\n        }\n\n        // Add a timeout promise\n        const timeoutPromise = new Promise((_, reject) => {\n          setTimeout(() => reject(new Error('Request timeout after 45 seconds')), 45000);\n        });\n\n        // Race between the API call and timeout\n        const response = await Promise.race([apiClient.get(url), timeoutPromise]);\n        console.log('üì° API Response status:', response.status);\n        console.log('üì° API Response data type:', typeof response.data);\n        console.log('üì° API Response is array:', Array.isArray(response.data));\n\n        // Check if response.data is actually the inventory array\n        let inventoryData = response.data;\n\n        // Sometimes APIs wrap data in an object\n        if (response.data && !Array.isArray(response.data)) {\n          console.log('‚ö†Ô∏è Response data is not an array, checking for wrapped data...');\n          console.log('Response keys:', Object.keys(response.data));\n\n          // Check common wrapper patterns\n          if (response.data.data && Array.isArray(response.data.data)) {\n            inventoryData = response.data.data;\n          } else if (response.data.items && Array.isArray(response.data.items)) {\n            inventoryData = response.data.items;\n          } else if (response.data.inventory && Array.isArray(response.data.inventory)) {\n            inventoryData = response.data.inventory;\n          } else {\n            console.error('‚ùå Unexpected response format:', response.data);\n            // Reset loading state before returning\n            isLoadingInventory = false;\n            loadingPromise = null;\n            return [];\n          }\n        }\n\n        // Cache the response\n        inventoryCache = inventoryData;\n        cacheTimestamp = Date.now();\n\n        // Create search index\n        console.log('üîç Creating search index...');\n        searchIndex = createSearchIndex(inventoryData);\n        indexTimestamp = Date.now();\n        console.log(`‚úÖ Received ${inventoryData.length} items from DMI API`);\n        console.log('Sample items:', inventoryData.slice(0, 3));\n        return inventoryData;\n      } catch (error) {\n        console.error('‚ùå Error fetching inventory:', error);\n        console.error('Error details:', error.message);\n\n        // Reset loading state on error\n        isLoadingInventory = false;\n        loadingPromise = null;\n\n        // Clear cache on error to force retry next time\n        inventoryCache = null;\n        cacheTimestamp = null;\n\n        // Return empty array if API fails\n        console.log('‚ö†Ô∏è API error, returning empty array');\n        return [];\n      } finally {\n        isLoadingInventory = false;\n        loadingPromise = null;\n      }\n    })();\n    return loadingPromise;\n  },\n  // Get inventory changes since timestamp\n  async getInventoryChanges(lastUpdate) {\n    if (DMI_CONFIG.USE_MOCK) {\n      return [];\n    }\n    try {\n      const url = buildUrl('inventorychanges', {\n        lastupdate: lastUpdate\n      });\n      const response = await apiClient.get(url);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching inventory changes:', error);\n      throw error;\n    }\n  },\n  // Optimized search with caching and indexing\n  async searchInventoryByModel(searchTerm) {\n    if (!searchTerm || searchTerm.length < 2) {\n      console.log('‚ùå Search term too short:', searchTerm);\n      return [];\n    }\n    console.log('üîç Starting search for:', searchTerm);\n\n    // Check search cache first\n    const cacheKey = searchTerm.toLowerCase();\n    const cachedResult = searchCache.get(cacheKey);\n    if (cachedResult && Date.now() - cachedResult.timestamp < SEARCH_CACHE_DURATION) {\n      console.log('üéØ Using cached search results for:', searchTerm);\n      return cachedResult.results;\n    }\n    try {\n      // Check if we have inventory data at all\n      if (!inventoryCache && !searchIndex) {\n        console.log('‚ö†Ô∏è No inventory data available, fetching...');\n        await this.getInventory();\n      }\n\n      // Use indexed search if available and fresh\n      if (searchIndex && indexTimestamp && Date.now() - indexTimestamp < CACHE_DURATION) {\n        console.log('‚ö° Using indexed search for:', searchTerm);\n        console.log('üìä Search index stats:', {\n          modelEntries: searchIndex.byModel.size,\n          brandEntries: searchIndex.byBrand.size,\n          totalItems: searchIndex.allItems.length\n        });\n        const results = searchWithIndex(searchTerm, searchIndex);\n        console.log(`üì¶ Index search found ${results.length} results`);\n\n        // Sort results to prioritize exact matches\n        const searchLower = searchTerm.toLowerCase();\n        const sorted = results.sort((a, b) => {\n          const aModelExact = a.Model_Number && a.Model_Number.toLowerCase() === searchLower;\n          const bModelExact = b.Model_Number && b.Model_Number.toLowerCase() === searchLower;\n          if (aModelExact && !bModelExact) return -1;\n          if (!aModelExact && bModelExact) return 1;\n          const aModelStarts = a.Model_Number && a.Model_Number.toLowerCase().startsWith(searchLower);\n          const bModelStarts = b.Model_Number && b.Model_Number.toLowerCase().startsWith(searchLower);\n          if (aModelStarts && !bModelStarts) return -1;\n          if (!aModelStarts && bModelStarts) return 1;\n          return 0;\n        });\n        const limitedResults = sorted.slice(0, 50);\n\n        // Cache the search results\n        searchCache.set(cacheKey, {\n          results: limitedResults,\n          timestamp: Date.now()\n        });\n\n        // Clean up old cache entries if too many\n        if (searchCache.size > MAX_SEARCH_CACHE_SIZE) {\n          const oldestKey = searchCache.keys().next().value;\n          searchCache.delete(oldestKey);\n        }\n        return limitedResults;\n      }\n\n      // Fallback to regular search if index not available\n      console.log('üîç Using regular search (no index) for:', searchTerm);\n      const inventory = await this.getInventory();\n      console.log(`üìä Inventory has ${inventory.length} items`);\n      if (inventory.length === 0) {\n        console.log('‚ùå No inventory data available');\n        return [];\n      }\n      const searchLower = searchTerm.toLowerCase();\n\n      // Filter results based on model number, description, or brand\n      const filtered = inventory.filter(item => {\n        const modelMatch = item.Model_Number && item.Model_Number.toLowerCase().includes(searchLower);\n        const descMatch = item.Description && item.Description.toLowerCase().includes(searchLower);\n        const brandMatch = item.Brand && item.Brand.toLowerCase().includes(searchLower);\n        const categoryMatch = item.Category_Major && item.Category_Major.toLowerCase().includes(searchLower);\n        return modelMatch || descMatch || brandMatch || categoryMatch;\n      });\n      console.log(`üì¶ Regular search found ${filtered.length} results`);\n\n      // Sort results to prioritize exact matches and model number matches\n      const sorted = filtered.sort((a, b) => {\n        const aModelExact = a.Model_Number && a.Model_Number.toLowerCase() === searchLower;\n        const bModelExact = b.Model_Number && b.Model_Number.toLowerCase() === searchLower;\n        if (aModelExact && !bModelExact) return -1;\n        if (!aModelExact && bModelExact) return 1;\n        const aModelStarts = a.Model_Number && a.Model_Number.toLowerCase().startsWith(searchLower);\n        const bModelStarts = b.Model_Number && b.Model_Number.toLowerCase().startsWith(searchLower);\n        if (aModelStarts && !bModelStarts) return -1;\n        if (!aModelStarts && bModelStarts) return 1;\n        return 0;\n      });\n\n      // Limit results for performance\n      const limitedResults = sorted.slice(0, 50);\n\n      // Cache the results\n      searchCache.set(cacheKey, {\n        results: limitedResults,\n        timestamp: Date.now()\n      });\n      return limitedResults;\n    } catch (error) {\n      console.error('Error searching inventory:', error);\n      // Return empty array on error\n      return [];\n    }\n  },\n  // Get inventory by brand\n  async getInventoryByBrand(brandCode) {\n    if (DMI_CONFIG.USE_MOCK) {\n      return [];\n    }\n    try {\n      const url = buildUrl('inventory', {\n        brand: brandCode\n      });\n      const response = await apiClient.get(url);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching inventory by brand:', error);\n      throw error;\n    }\n  },\n  // Get order status\n  async getOrderStatus(orderCriteria) {\n    if (DMI_CONFIG.USE_MOCK) {\n      return [];\n    }\n    try {\n      const url = buildUrl('orderstatus');\n      const response = await apiClient.post(url, orderCriteria);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching order status:', error);\n      throw error;\n    }\n  },\n  // Get open orders\n  async getOpenOrders(params = {}) {\n    if (DMI_CONFIG.USE_MOCK) {\n      return [];\n    }\n    try {\n      const url = buildUrl('openorders', params);\n      const response = await apiClient.get(url);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching open orders:', error);\n      throw error;\n    }\n  },\n  // Get open backorders\n  async getOpenBackorders(params = {}) {\n    if (DMI_CONFIG.USE_MOCK) {\n      return [];\n    }\n    try {\n      const url = buildUrl('openbackorders', params);\n      const response = await apiClient.get(url);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching open backorders:', error);\n      throw error;\n    }\n  },\n  // Get invoice details\n  async getInvoiceDetail(params = {}) {\n    if (DMI_CONFIG.USE_MOCK) {\n      return [];\n    }\n    try {\n      const url = buildUrl('invoicedetail', params);\n      const response = await apiClient.get(url);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching invoice detail:', error);\n      throw error;\n    }\n  },\n  // Create new order\n  async createNewOrder(orderData) {\n    if (DMI_CONFIG.USE_MOCK) {\n      return {\n        Result: 'OK',\n        Transaction_ID: 'MOCK_' + Date.now(),\n        DMI_Order_ID: Math.floor(Math.random() * 100000),\n        ...orderData[0].orderheader\n      };\n    }\n    try {\n      const url = buildPostUrl('neworder');\n      const response = await apiClient.post(url, orderData);\n      return response.data;\n    } catch (error) {\n      console.error('Error creating new order:', error);\n      throw error;\n    }\n  },\n  // Add new order line\n  async addNewOrderLine(orderLineData) {\n    if (DMI_CONFIG.USE_MOCK) {\n      return {\n        Result: 'OK',\n        Transaction_ID: 'MOCK_' + Date.now(),\n        ...orderLineData[0]\n      };\n    }\n    try {\n      const url = buildPostUrl('neworderline');\n      const response = await apiClient.post(url, orderLineData);\n      return response.data;\n    } catch (error) {\n      console.error('Error adding new order line:', error);\n      throw error;\n    }\n  },\n  // Change order\n  async changeOrder(changeData) {\n    if (DMI_CONFIG.USE_MOCK) {\n      return {\n        Result: 'OK',\n        Transaction_ID: 'MOCK_' + Date.now(),\n        ...changeData[0]\n      };\n    }\n    try {\n      const url = buildPostUrl('changeorder');\n      const response = await apiClient.post(url, changeData);\n      return response.data;\n    } catch (error) {\n      console.error('Error changing order:', error);\n      throw error;\n    }\n  },\n  // Change order item\n  async changeOrderItem(changeData) {\n    if (DMI_CONFIG.USE_MOCK) {\n      return {\n        Result: 'OK',\n        Transaction_ID: 'MOCK_' + Date.now(),\n        ...changeData[0]\n      };\n    }\n    try {\n      const url = buildPostUrl('changeorderitem');\n      const response = await apiClient.post(url, changeData);\n      return response.data;\n    } catch (error) {\n      console.error('Error changing order item:', error);\n      throw error;\n    }\n  },\n  // Utility function to format price\n  formatPrice(price) {\n    if (!price || price === '0.00') return 'Call for price';\n    return `$${parseFloat(price).toFixed(2)}`;\n  },\n  // Utility function to check availability\n  checkAvailability(item) {\n    const available = parseInt(item.Available) || 0;\n    const hasStock = item.Has_Stock === 'Y';\n    const backordered = parseInt(item.Backordered) || 0;\n    const onOrder = parseInt(item.On_Order) || 0;\n    const inTransit = parseInt(item.In_Transit) || 0;\n    if (hasStock && available > 0) {\n      return {\n        status: 'In Stock',\n        quantity: available,\n        color: 'success'\n      };\n    } else if (available > 0) {\n      return {\n        status: 'Available',\n        quantity: available,\n        color: 'warning'\n      };\n    } else if (inTransit > 0) {\n      return {\n        status: 'In Transit',\n        quantity: inTransit,\n        color: 'info'\n      };\n    } else if (onOrder > 0) {\n      return {\n        status: 'On Order',\n        quantity: onOrder,\n        color: 'info'\n      };\n    } else if (backordered > 0) {\n      return {\n        status: 'Backordered',\n        quantity: backordered,\n        color: 'error'\n      };\n    } else {\n      return {\n        status: 'Out of Stock',\n        quantity: 0,\n        color: 'error'\n      };\n    }\n  },\n  // Clear all caches\n  clearCache() {\n    inventoryCache = null;\n    cacheTimestamp = null;\n    searchCache.clear();\n    searchIndex = null;\n    indexTimestamp = null;\n    console.log('üßπ All caches cleared');\n  },\n  // Get cache status\n  getCacheStatus() {\n    return {\n      inventoryCached: !!inventoryCache,\n      inventoryCacheAge: cacheTimestamp ? Date.now() - cacheTimestamp : null,\n      searchCacheSize: searchCache.size,\n      indexAvailable: !!searchIndex,\n      indexAge: indexTimestamp ? Date.now() - indexTimestamp : null\n    };\n  },\n  // Get config for debugging\n  getConfig() {\n    return DMI_CONFIG;\n  },\n  // Export buildUrl for testing\n  buildUrl\n};\nexport default dmiApi;","map":{"version":3,"names":["axios","DMI_CONFIG","DEALER_ID","process","env","REACT_APP_DMI_DEALER_ID","REST_CODE","REACT_APP_DMI_REST_CODE","BASE_URL","REACT_APP_DMI_PRODUCTION_URL","SANDBOX_URL","REACT_APP_DMI_SANDBOX_URL","USE_SANDBOX","REACT_APP_DMI_ENVIRONMENT","USE_MOCK","PROXY_URL","inventoryCache","cacheTimestamp","CACHE_DURATION","searchCache","Map","SEARCH_CACHE_DURATION","MAX_SEARCH_CACHE_SIZE","isLoadingInventory","loadingPromise","searchIndex","indexTimestamp","apiClient","create","timeout","headers","interceptors","request","use","console","log","error","Promise","reject","response","status","data","JSON","stringify","substring","buildUrl","resource","additionalParams","baseUrl","params","URLSearchParams","format","dealerid","restcode","apiUrl","toString","NODE_ENV","encodeURIComponent","buildPostUrl","createSearchIndex","inventory","index","byModel","byBrand","byDescription","byCategory","allItems","forEach","item","Model_Number","modelLower","toLowerCase","set","modelParts","split","part","length","has","items","get","Array","isArray","push","Brand","brandLower","Description","words","word","Category_Major","categoryLower","searchWithIndex","searchTerm","searchLower","resultSet","Set","add","searchParts","size","modelMatch","includes","descMatch","brandMatch","from","dmiApi","preloadInventory","Date","now","getInventory","catch","err","url","decodedUrl","decodeURIComponent","timeoutPromise","_","setTimeout","Error","race","inventoryData","Object","keys","slice","message","getInventoryChanges","lastUpdate","lastupdate","searchInventoryByModel","cacheKey","cachedResult","timestamp","results","modelEntries","brandEntries","totalItems","sorted","sort","a","b","aModelExact","bModelExact","aModelStarts","startsWith","bModelStarts","limitedResults","oldestKey","next","value","delete","filtered","filter","categoryMatch","getInventoryByBrand","brandCode","brand","getOrderStatus","orderCriteria","post","getOpenOrders","getOpenBackorders","getInvoiceDetail","createNewOrder","orderData","Result","Transaction_ID","DMI_Order_ID","Math","floor","random","orderheader","addNewOrderLine","orderLineData","changeOrder","changeData","changeOrderItem","formatPrice","price","parseFloat","toFixed","checkAvailability","available","parseInt","Available","hasStock","Has_Stock","backordered","Backordered","onOrder","On_Order","inTransit","In_Transit","quantity","color","clearCache","clear","getCacheStatus","inventoryCached","inventoryCacheAge","searchCacheSize","indexAvailable","indexAge","getConfig"],"sources":["/Users/anuragmishra/Documents/Development/ML_Resources/RA/src/services/dmiApi.js"],"sourcesContent":["import axios from 'axios';\n\n// DMI API Configuration\nconst DMI_CONFIG = {\n    DEALER_ID: process.env.REACT_APP_DMI_DEALER_ID || '118215',\n    REST_CODE: process.env.REACT_APP_DMI_REST_CODE || 'DL67AJ19M2R0J',\n    BASE_URL: process.env.REACT_APP_DMI_PRODUCTION_URL || 'https://dmidrs.com/dealers/dmirest',\n    SANDBOX_URL: process.env.REACT_APP_DMI_SANDBOX_URL || 'https://dmidrs.com/dealers_sb/dmirest',\n    USE_SANDBOX: process.env.REACT_APP_DMI_ENVIRONMENT === 'sandbox',\n    USE_MOCK: false, // Set to true to use mock data\n    // Rochester Appliance proxy endpoint\n    PROXY_URL: 'https://rochesterapplianceparts.com/api/dmi-proxy'\n};\n\n// Enhanced cache system\nlet inventoryCache = null;\nlet cacheTimestamp = null;\nconst CACHE_DURATION = 30 * 60 * 1000; // 30 minutes (increased from 5)\n\n// Search cache to store recent search results\nconst searchCache = new Map();\nconst SEARCH_CACHE_DURATION = 10 * 60 * 1000; // 10 minutes\nconst MAX_SEARCH_CACHE_SIZE = 100;\n\n// Loading state\nlet isLoadingInventory = false;\nlet loadingPromise = null;\n\n// Pre-indexed search data for faster lookups\nlet searchIndex = null;\nlet indexTimestamp = null;\n\n// Create axios instance with default config\nconst apiClient = axios.create({\n    timeout: 60000, // Increased to 60 seconds for proxy requests\n    headers: {\n        'Content-Type': 'application/json',\n    }\n});\n\n// Request interceptor for debugging\napiClient.interceptors.request.use(request => {\n    console.log('DMI API Request:', request);\n    return request;\n}, error => {\n    console.error('DMI API Request Error:', error);\n    return Promise.reject(error);\n});\n\n// Response interceptor for debugging\napiClient.interceptors.response.use(response => {\n    console.log('DMI API Response:', response);\n    console.log('Response status:', response.status);\n    console.log('Response data preview:', response.data ? JSON.stringify(response.data).substring(0, 200) : 'No data');\n    return response;\n}, error => {\n    console.error('DMI API Response Error:', error);\n    if (error.response) {\n        console.error('Error status:', error.response.status);\n        console.error('Error data:', error.response.data);\n    }\n    return Promise.reject(error);\n});\n\n// Helper function to build URL with credentials\nconst buildUrl = (resource, additionalParams = {}) => {\n    const baseUrl = DMI_CONFIG.USE_SANDBOX ? DMI_CONFIG.SANDBOX_URL : DMI_CONFIG.BASE_URL;\n    const params = new URLSearchParams({\n        format: 'json',\n        resource: resource,\n        dealerid: DMI_CONFIG.DEALER_ID,\n        restcode: DMI_CONFIG.REST_CODE,\n        ...additionalParams\n    });\n\n    const apiUrl = `${baseUrl}/dmirest.php?${params.toString()}`;\n\n    // In development, use a public CORS proxy to bypass CORS issues\n    if (process.env.NODE_ENV === 'development') {\n        // Try allorigins.win which preserves the original request better\n        return `https://api.allorigins.win/raw?url=${encodeURIComponent(apiUrl)}`;\n    }\n\n    return apiUrl;\n};\n\n// Helper function to build POST URL\nconst buildPostUrl = (resource) => {\n    const baseUrl = DMI_CONFIG.USE_SANDBOX ? DMI_CONFIG.SANDBOX_URL : DMI_CONFIG.BASE_URL;\n    const params = new URLSearchParams({\n        format: 'json',\n        resource: resource,\n        dealerid: DMI_CONFIG.DEALER_ID,\n        restcode: DMI_CONFIG.REST_CODE\n    });\n\n    const apiUrl = `${baseUrl}/dmirest/dmirest_api.php?${params.toString()}`;\n\n    // In development, use a public CORS proxy to bypass CORS issues\n    if (process.env.NODE_ENV === 'development') {\n        // Try allorigins.win which preserves the original request better\n        return `https://api.allorigins.win/raw?url=${encodeURIComponent(apiUrl)}`;\n    }\n\n    return apiUrl;\n};\n\n// Helper function to create search index\nconst createSearchIndex = (inventory) => {\n    const index = {\n        byModel: new Map(),\n        byBrand: new Map(),\n        byDescription: new Map(),\n        byCategory: new Map(),\n        allItems: inventory\n    };\n\n    inventory.forEach(item => {\n        // Index by model number\n        if (item.Model_Number) {\n            const modelLower = item.Model_Number.toLowerCase();\n            // Store by full model and by parts\n            index.byModel.set(modelLower, item);\n\n            // Also index by model parts for partial matches\n            const modelParts = modelLower.split(/[\\s-_]+/);\n            modelParts.forEach(part => {\n                if (part.length > 2) {\n                    if (!index.byModel.has(part)) {\n                        index.byModel.set(part, []);\n                    }\n                    const items = index.byModel.get(part);\n                    if (Array.isArray(items)) {\n                        items.push(item);\n                    }\n                }\n            });\n        }\n\n        // Index by brand\n        if (item.Brand) {\n            const brandLower = item.Brand.toLowerCase();\n            if (!index.byBrand.has(brandLower)) {\n                index.byBrand.set(brandLower, []);\n            }\n            index.byBrand.get(brandLower).push(item);\n        }\n\n        // Index by description words\n        if (item.Description) {\n            const words = item.Description.toLowerCase().split(/\\s+/);\n            words.forEach(word => {\n                if (word.length > 3) {\n                    if (!index.byDescription.has(word)) {\n                        index.byDescription.set(word, []);\n                    }\n                    index.byDescription.get(word).push(item);\n                }\n            });\n        }\n\n        // Index by category\n        if (item.Category_Major) {\n            const categoryLower = item.Category_Major.toLowerCase();\n            if (!index.byCategory.has(categoryLower)) {\n                index.byCategory.set(categoryLower, []);\n            }\n            index.byCategory.get(categoryLower).push(item);\n        }\n    });\n\n    return index;\n};\n\n// Helper function to search using index\nconst searchWithIndex = (searchTerm, index) => {\n    const searchLower = searchTerm.toLowerCase();\n    const resultSet = new Set();\n\n    // Exact model match has highest priority\n    if (index.byModel.has(searchLower)) {\n        const item = index.byModel.get(searchLower);\n        if (!Array.isArray(item)) {\n            resultSet.add(item);\n        }\n    }\n\n    // Search in model parts\n    const searchParts = searchLower.split(/[\\s-_]+/);\n    searchParts.forEach(part => {\n        if (part.length > 2 && index.byModel.has(part)) {\n            const items = index.byModel.get(part);\n            if (Array.isArray(items)) {\n                items.forEach(item => resultSet.add(item));\n            }\n        }\n    });\n\n    // Search in brands\n    if (index.byBrand.has(searchLower)) {\n        index.byBrand.get(searchLower).forEach(item => resultSet.add(item));\n    }\n\n    // Search in description words\n    const words = searchLower.split(/\\s+/);\n    words.forEach(word => {\n        if (word.length > 3 && index.byDescription.has(word)) {\n            index.byDescription.get(word).forEach(item => resultSet.add(item));\n        }\n    });\n\n    // Search in categories\n    if (index.byCategory.has(searchLower)) {\n        index.byCategory.get(searchLower).forEach(item => resultSet.add(item));\n    }\n\n    // Also do a fallback substring search on items not yet found\n    if (resultSet.size < 50) {\n        index.allItems.forEach(item => {\n            if (!resultSet.has(item)) {\n                const modelMatch = item.Model_Number && item.Model_Number.toLowerCase().includes(searchLower);\n                const descMatch = item.Description && item.Description.toLowerCase().includes(searchLower);\n                const brandMatch = item.Brand && item.Brand.toLowerCase().includes(searchLower);\n\n                if (modelMatch || descMatch || brandMatch) {\n                    resultSet.add(item);\n                }\n            }\n        });\n    }\n\n    return Array.from(resultSet);\n};\n\n// DMI API Service\nconst dmiApi = {\n    // Preload inventory (call this on app start)\n    async preloadInventory() {\n        if (inventoryCache && cacheTimestamp && (Date.now() - cacheTimestamp < CACHE_DURATION)) {\n            console.log('üì¶ Inventory already cached');\n            return;\n        }\n\n        console.log('üîÑ Preloading inventory in background...');\n        // Don't await, let it load in background\n        this.getInventory().catch(err => {\n            console.error('Failed to preload inventory:', err);\n        });\n    },\n\n    // Get full inventory with improved caching\n    async getInventory(params = {}) {\n        if (DMI_CONFIG.USE_MOCK) {\n            console.log('üîÑ Mock mode is enabled but no mock data available');\n            return [];\n        }\n\n        // Check cache first\n        if (inventoryCache && cacheTimestamp && (Date.now() - cacheTimestamp < CACHE_DURATION)) {\n            console.log('üì¶ Using cached inventory data');\n            return inventoryCache;\n        }\n\n        // If already loading, return the existing promise\n        if (isLoadingInventory && loadingPromise) {\n            console.log('‚è≥ Inventory is already being loaded, waiting...');\n            return loadingPromise;\n        }\n\n        isLoadingInventory = true;\n\n        loadingPromise = (async () => {\n            try {\n                const url = buildUrl('inventory', params);\n                console.log('üåê Fetching real inventory from DMI API...');\n                console.log('API URL:', url);\n\n                // Also log the decoded URL for debugging\n                if (url.includes('corsproxy.io')) {\n                    const decodedUrl = decodeURIComponent(url.split('corsproxy.io/?')[1]);\n                    console.log('Actual DMI URL:', decodedUrl);\n                }\n\n                // Add a timeout promise\n                const timeoutPromise = new Promise((_, reject) => {\n                    setTimeout(() => reject(new Error('Request timeout after 45 seconds')), 45000);\n                });\n\n                // Race between the API call and timeout\n                const response = await Promise.race([\n                    apiClient.get(url),\n                    timeoutPromise\n                ]);\n\n                console.log('üì° API Response status:', response.status);\n                console.log('üì° API Response data type:', typeof response.data);\n                console.log('üì° API Response is array:', Array.isArray(response.data));\n\n                // Check if response.data is actually the inventory array\n                let inventoryData = response.data;\n\n                // Sometimes APIs wrap data in an object\n                if (response.data && !Array.isArray(response.data)) {\n                    console.log('‚ö†Ô∏è Response data is not an array, checking for wrapped data...');\n                    console.log('Response keys:', Object.keys(response.data));\n\n                    // Check common wrapper patterns\n                    if (response.data.data && Array.isArray(response.data.data)) {\n                        inventoryData = response.data.data;\n                    } else if (response.data.items && Array.isArray(response.data.items)) {\n                        inventoryData = response.data.items;\n                    } else if (response.data.inventory && Array.isArray(response.data.inventory)) {\n                        inventoryData = response.data.inventory;\n                    } else {\n                        console.error('‚ùå Unexpected response format:', response.data);\n                        // Reset loading state before returning\n                        isLoadingInventory = false;\n                        loadingPromise = null;\n                        return [];\n                    }\n                }\n\n                // Cache the response\n                inventoryCache = inventoryData;\n                cacheTimestamp = Date.now();\n\n                // Create search index\n                console.log('üîç Creating search index...');\n                searchIndex = createSearchIndex(inventoryData);\n                indexTimestamp = Date.now();\n\n                console.log(`‚úÖ Received ${inventoryData.length} items from DMI API`);\n                console.log('Sample items:', inventoryData.slice(0, 3));\n\n                return inventoryData;\n            } catch (error) {\n                console.error('‚ùå Error fetching inventory:', error);\n                console.error('Error details:', error.message);\n\n                // Reset loading state on error\n                isLoadingInventory = false;\n                loadingPromise = null;\n\n                // Clear cache on error to force retry next time\n                inventoryCache = null;\n                cacheTimestamp = null;\n\n                // Return empty array if API fails\n                console.log('‚ö†Ô∏è API error, returning empty array');\n                return [];\n            } finally {\n                isLoadingInventory = false;\n                loadingPromise = null;\n            }\n        })();\n\n        return loadingPromise;\n    },\n\n    // Get inventory changes since timestamp\n    async getInventoryChanges(lastUpdate) {\n        if (DMI_CONFIG.USE_MOCK) {\n            return [];\n        }\n\n        try {\n            const url = buildUrl('inventorychanges', { lastupdate: lastUpdate });\n            const response = await apiClient.get(url);\n            return response.data;\n        } catch (error) {\n            console.error('Error fetching inventory changes:', error);\n            throw error;\n        }\n    },\n\n    // Optimized search with caching and indexing\n    async searchInventoryByModel(searchTerm) {\n        if (!searchTerm || searchTerm.length < 2) {\n            console.log('‚ùå Search term too short:', searchTerm);\n            return [];\n        }\n\n        console.log('üîç Starting search for:', searchTerm);\n\n        // Check search cache first\n        const cacheKey = searchTerm.toLowerCase();\n        const cachedResult = searchCache.get(cacheKey);\n        if (cachedResult && (Date.now() - cachedResult.timestamp < SEARCH_CACHE_DURATION)) {\n            console.log('üéØ Using cached search results for:', searchTerm);\n            return cachedResult.results;\n        }\n\n        try {\n            // Check if we have inventory data at all\n            if (!inventoryCache && !searchIndex) {\n                console.log('‚ö†Ô∏è No inventory data available, fetching...');\n                await this.getInventory();\n            }\n\n            // Use indexed search if available and fresh\n            if (searchIndex && indexTimestamp && (Date.now() - indexTimestamp < CACHE_DURATION)) {\n                console.log('‚ö° Using indexed search for:', searchTerm);\n                console.log('üìä Search index stats:', {\n                    modelEntries: searchIndex.byModel.size,\n                    brandEntries: searchIndex.byBrand.size,\n                    totalItems: searchIndex.allItems.length\n                });\n\n                const results = searchWithIndex(searchTerm, searchIndex);\n                console.log(`üì¶ Index search found ${results.length} results`);\n\n                // Sort results to prioritize exact matches\n                const searchLower = searchTerm.toLowerCase();\n                const sorted = results.sort((a, b) => {\n                    const aModelExact = a.Model_Number && a.Model_Number.toLowerCase() === searchLower;\n                    const bModelExact = b.Model_Number && b.Model_Number.toLowerCase() === searchLower;\n\n                    if (aModelExact && !bModelExact) return -1;\n                    if (!aModelExact && bModelExact) return 1;\n\n                    const aModelStarts = a.Model_Number && a.Model_Number.toLowerCase().startsWith(searchLower);\n                    const bModelStarts = b.Model_Number && b.Model_Number.toLowerCase().startsWith(searchLower);\n\n                    if (aModelStarts && !bModelStarts) return -1;\n                    if (!aModelStarts && bModelStarts) return 1;\n\n                    return 0;\n                });\n\n                const limitedResults = sorted.slice(0, 50);\n\n                // Cache the search results\n                searchCache.set(cacheKey, {\n                    results: limitedResults,\n                    timestamp: Date.now()\n                });\n\n                // Clean up old cache entries if too many\n                if (searchCache.size > MAX_SEARCH_CACHE_SIZE) {\n                    const oldestKey = searchCache.keys().next().value;\n                    searchCache.delete(oldestKey);\n                }\n\n                return limitedResults;\n            }\n\n            // Fallback to regular search if index not available\n            console.log('üîç Using regular search (no index) for:', searchTerm);\n            const inventory = await this.getInventory();\n            console.log(`üìä Inventory has ${inventory.length} items`);\n\n            if (inventory.length === 0) {\n                console.log('‚ùå No inventory data available');\n                return [];\n            }\n\n            const searchLower = searchTerm.toLowerCase();\n\n            // Filter results based on model number, description, or brand\n            const filtered = inventory.filter(item => {\n                const modelMatch = item.Model_Number && item.Model_Number.toLowerCase().includes(searchLower);\n                const descMatch = item.Description && item.Description.toLowerCase().includes(searchLower);\n                const brandMatch = item.Brand && item.Brand.toLowerCase().includes(searchLower);\n                const categoryMatch = item.Category_Major && item.Category_Major.toLowerCase().includes(searchLower);\n\n                return modelMatch || descMatch || brandMatch || categoryMatch;\n            });\n\n            console.log(`üì¶ Regular search found ${filtered.length} results`);\n\n            // Sort results to prioritize exact matches and model number matches\n            const sorted = filtered.sort((a, b) => {\n                const aModelExact = a.Model_Number && a.Model_Number.toLowerCase() === searchLower;\n                const bModelExact = b.Model_Number && b.Model_Number.toLowerCase() === searchLower;\n\n                if (aModelExact && !bModelExact) return -1;\n                if (!aModelExact && bModelExact) return 1;\n\n                const aModelStarts = a.Model_Number && a.Model_Number.toLowerCase().startsWith(searchLower);\n                const bModelStarts = b.Model_Number && b.Model_Number.toLowerCase().startsWith(searchLower);\n\n                if (aModelStarts && !bModelStarts) return -1;\n                if (!aModelStarts && bModelStarts) return 1;\n\n                return 0;\n            });\n\n            // Limit results for performance\n            const limitedResults = sorted.slice(0, 50);\n\n            // Cache the results\n            searchCache.set(cacheKey, {\n                results: limitedResults,\n                timestamp: Date.now()\n            });\n\n            return limitedResults;\n        } catch (error) {\n            console.error('Error searching inventory:', error);\n            // Return empty array on error\n            return [];\n        }\n    },\n\n    // Get inventory by brand\n    async getInventoryByBrand(brandCode) {\n        if (DMI_CONFIG.USE_MOCK) {\n            return [];\n        }\n\n        try {\n            const url = buildUrl('inventory', { brand: brandCode });\n            const response = await apiClient.get(url);\n            return response.data;\n        } catch (error) {\n            console.error('Error fetching inventory by brand:', error);\n            throw error;\n        }\n    },\n\n    // Get order status\n    async getOrderStatus(orderCriteria) {\n        if (DMI_CONFIG.USE_MOCK) {\n            return [];\n        }\n\n        try {\n            const url = buildUrl('orderstatus');\n            const response = await apiClient.post(url, orderCriteria);\n            return response.data;\n        } catch (error) {\n            console.error('Error fetching order status:', error);\n            throw error;\n        }\n    },\n\n    // Get open orders\n    async getOpenOrders(params = {}) {\n        if (DMI_CONFIG.USE_MOCK) {\n            return [];\n        }\n\n        try {\n            const url = buildUrl('openorders', params);\n            const response = await apiClient.get(url);\n            return response.data;\n        } catch (error) {\n            console.error('Error fetching open orders:', error);\n            throw error;\n        }\n    },\n\n    // Get open backorders\n    async getOpenBackorders(params = {}) {\n        if (DMI_CONFIG.USE_MOCK) {\n            return [];\n        }\n\n        try {\n            const url = buildUrl('openbackorders', params);\n            const response = await apiClient.get(url);\n            return response.data;\n        } catch (error) {\n            console.error('Error fetching open backorders:', error);\n            throw error;\n        }\n    },\n\n    // Get invoice details\n    async getInvoiceDetail(params = {}) {\n        if (DMI_CONFIG.USE_MOCK) {\n            return [];\n        }\n\n        try {\n            const url = buildUrl('invoicedetail', params);\n            const response = await apiClient.get(url);\n            return response.data;\n        } catch (error) {\n            console.error('Error fetching invoice detail:', error);\n            throw error;\n        }\n    },\n\n    // Create new order\n    async createNewOrder(orderData) {\n        if (DMI_CONFIG.USE_MOCK) {\n            return {\n                Result: 'OK',\n                Transaction_ID: 'MOCK_' + Date.now(),\n                DMI_Order_ID: Math.floor(Math.random() * 100000),\n                ...orderData[0].orderheader\n            };\n        }\n\n        try {\n            const url = buildPostUrl('neworder');\n            const response = await apiClient.post(url, orderData);\n            return response.data;\n        } catch (error) {\n            console.error('Error creating new order:', error);\n            throw error;\n        }\n    },\n\n    // Add new order line\n    async addNewOrderLine(orderLineData) {\n        if (DMI_CONFIG.USE_MOCK) {\n            return {\n                Result: 'OK',\n                Transaction_ID: 'MOCK_' + Date.now(),\n                ...orderLineData[0]\n            };\n        }\n\n        try {\n            const url = buildPostUrl('neworderline');\n            const response = await apiClient.post(url, orderLineData);\n            return response.data;\n        } catch (error) {\n            console.error('Error adding new order line:', error);\n            throw error;\n        }\n    },\n\n    // Change order\n    async changeOrder(changeData) {\n        if (DMI_CONFIG.USE_MOCK) {\n            return {\n                Result: 'OK',\n                Transaction_ID: 'MOCK_' + Date.now(),\n                ...changeData[0]\n            };\n        }\n\n        try {\n            const url = buildPostUrl('changeorder');\n            const response = await apiClient.post(url, changeData);\n            return response.data;\n        } catch (error) {\n            console.error('Error changing order:', error);\n            throw error;\n        }\n    },\n\n    // Change order item\n    async changeOrderItem(changeData) {\n        if (DMI_CONFIG.USE_MOCK) {\n            return {\n                Result: 'OK',\n                Transaction_ID: 'MOCK_' + Date.now(),\n                ...changeData[0]\n            };\n        }\n\n        try {\n            const url = buildPostUrl('changeorderitem');\n            const response = await apiClient.post(url, changeData);\n            return response.data;\n        } catch (error) {\n            console.error('Error changing order item:', error);\n            throw error;\n        }\n    },\n\n    // Utility function to format price\n    formatPrice(price) {\n        if (!price || price === '0.00') return 'Call for price';\n        return `$${parseFloat(price).toFixed(2)}`;\n    },\n\n    // Utility function to check availability\n    checkAvailability(item) {\n        const available = parseInt(item.Available) || 0;\n        const hasStock = item.Has_Stock === 'Y';\n        const backordered = parseInt(item.Backordered) || 0;\n        const onOrder = parseInt(item.On_Order) || 0;\n        const inTransit = parseInt(item.In_Transit) || 0;\n\n        if (hasStock && available > 0) {\n            return { status: 'In Stock', quantity: available, color: 'success' };\n        } else if (available > 0) {\n            return { status: 'Available', quantity: available, color: 'warning' };\n        } else if (inTransit > 0) {\n            return { status: 'In Transit', quantity: inTransit, color: 'info' };\n        } else if (onOrder > 0) {\n            return { status: 'On Order', quantity: onOrder, color: 'info' };\n        } else if (backordered > 0) {\n            return { status: 'Backordered', quantity: backordered, color: 'error' };\n        } else {\n            return { status: 'Out of Stock', quantity: 0, color: 'error' };\n        }\n    },\n\n    // Clear all caches\n    clearCache() {\n        inventoryCache = null;\n        cacheTimestamp = null;\n        searchCache.clear();\n        searchIndex = null;\n        indexTimestamp = null;\n        console.log('üßπ All caches cleared');\n    },\n\n    // Get cache status\n    getCacheStatus() {\n        return {\n            inventoryCached: !!inventoryCache,\n            inventoryCacheAge: cacheTimestamp ? Date.now() - cacheTimestamp : null,\n            searchCacheSize: searchCache.size,\n            indexAvailable: !!searchIndex,\n            indexAge: indexTimestamp ? Date.now() - indexTimestamp : null\n        };\n    },\n\n    // Get config for debugging\n    getConfig() {\n        return DMI_CONFIG;\n    },\n\n    // Export buildUrl for testing\n    buildUrl\n};\n\nexport default dmiApi; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}